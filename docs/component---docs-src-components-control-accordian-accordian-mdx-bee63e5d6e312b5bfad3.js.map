{"version":3,"sources":["webpack:///../docsSrc/components/Control/Accordian/Accordian.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","of","Accordian","__position","__code","__scope","Playground","Props","DoczContainer","menus3","title","list","value","onClick","window","open","React","checkedList","setCheckedList","direction","menus","onCheckItem","checkedIndex","findIndex","el","splice","isCheckedItem","_title","_value","some","hasCheckBox","map","onClickItem","console","log","isMDXComponent"],"mappings":"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","file":"component---docs-src-components-control-accordian-accordian-mdx-bee63e5d6e312b5bfad3.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/myoungho.pak/workspace/remember-ui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { Accordian } from './Accordian';\nimport { DoczContainer } from 'remember-ui';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"accordian\"\n    }}>{`Accordian`}</h1>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <Props of={Accordian} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic usage`}</h2>\n    <Playground __position={1} __code={'() => {\\n  const menus = [\\n    {\\n      title: \\'체크메뉴1\\',\\n      list: [\\n        { title: \\'sameValue\\', value: \\'sameValue\\' },\\n        { title: \\'Menu1-2\\', value: \\'Menu1-2\\' },\\n        { title: \\'Menu1-3\\', value: \\'Menu1-3\\' },\\n      ],\\n    },\\n    {\\n      title: \\'체크메뉴2\\',\\n      list: [\\n        { title: \\'sameValue\\', value: \\'sameValue\\' },\\n        { title: \\'Menu2-2\\', value: \\'Menu2-2\\' },\\n        { title: \\'Menu2-3\\', value: \\'Menu2-3\\' },\\n        { title: \\'Menu2-4\\', value: \\'Menu2-4\\' },\\n      ],\\n    },\\n    {\\n      title: \\'체크메뉴3\\',\\n      list: [\\n        { title: \\'Menu3-1\\', value: \\'Menu3-1\\' },\\n        { title: \\'Menu3-2\\', value: \\'Menu3-2\\' },\\n      ],\\n    },\\n  ]\\n  const menus2 = [\\n    {\\n      title: \\'Deafult Menu1\\',\\n      list: [\\n        { title: \\'sameValue\\', value: \\'sameValue\\' },\\n        { title: \\'diffVal1\\', value: \\'diffVal1\\' },\\n      ],\\n    },\\n    {\\n      title: \\'Deafult Menu2\\',\\n      list: [\\n        { title: \\'sameValue\\', value: \\'sameValue\\' },\\n        { title: \\'diffVal2\\', value: \\'diffVal2\\' },\\n      ],\\n    },\\n  ]\\n  const menus3 = [\\n    {\\n      title: \\'즐겨찾기1\\',\\n      list: [\\n        {\\n          title: \\'커리어웹 가기\\',\\n          value: \\'https://career.rememberapp.co.kr/\\',\\n          onClick: value => {\\n            window.open(value)\\n          },\\n        },\\n        {\\n          title: \\'리멤버웹 가기\\',\\n          value: \\'https://rememberapp.co.kr/\\',\\n          onClick: value => {\\n            window.open(value)\\n          },\\n        },\\n      ],\\n    },\\n    {\\n      title: \\'즐겨찾기2\\',\\n      list: [\\n        {\\n          title: \\'프로필웹 가기\\',\\n          value: \\'http://profile.rememberapp.co.kr/\\',\\n          onClick: value => {\\n            window.open(value)\\n          },\\n        },\\n        {\\n          title: \\'커뮤니티웹 가기\\',\\n          value: \\'https://community.rememberapp.co.kr/\\',\\n          onClick: value => {\\n            window.open(value)\\n          },\\n        },\\n      ],\\n    },\\n  ]\\n  const [checkedList, setCheckedList] = React.useState([])\\n  const isCheckedItem = (_title, _value) => {\\n    return checkedList.some(\\n      ({ title, value }) => title === _title && value === _value,\\n    )\\n  }\\n  const onCheckItem = (title, value) => {\\n    const checkedIndex = checkedList.findIndex(\\n      el => el.title === title && el.value === value,\\n    )\\n    if (checkedIndex < 0) {\\n      setCheckedList([...checkedList, { title, value }])\\n    } else {\\n      checkedList.splice(checkedIndex, 1)\\n      setCheckedList([...checkedList])\\n    }\\n  }\\n  return (\\n    <>\\n      <DoczContainer direction=\\\"column\\\">\\n        <h3>체크박스 있는 경우</h3>\\n        <Accordian\\n          menus={menus}\\n          onCheckItem={onCheckItem}\\n          isCheckedItem={isCheckedItem}\\n          hasCheckBox={true}\\n        />\\n        <>{checkedList.map(el => ` (${el.title}/${el.value}) `)}</>\\n      </DoczContainer>\\n      <DoczContainer direction=\\\"column\\\">\\n        <h3>\\n          각 menu 클릭할 경우 공통 로직 적용 되는 예제 / 현재는 console.log\\n        </h3>\\n        <Accordian menus={menus2} onClickItem={value => console.log(value)} />\\n      </DoczContainer>\\n      <DoczContainer direction=\\\"column\\\">\\n        <h3>각 menu 클릭할 경우 각각의 event handling 할 경우</h3>\\n        <Accordian menus={menus3} />\\n      </DoczContainer>\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Accordian,\n      DoczContainer,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const menus = [{\n          title: '체크메뉴1',\n          list: [{\n            title: 'sameValue',\n            value: 'sameValue'\n          }, {\n            title: 'Menu1-2',\n            value: 'Menu1-2'\n          }, {\n            title: 'Menu1-3',\n            value: 'Menu1-3'\n          }]\n        }, {\n          title: '체크메뉴2',\n          list: [{\n            title: 'sameValue',\n            value: 'sameValue'\n          }, {\n            title: 'Menu2-2',\n            value: 'Menu2-2'\n          }, {\n            title: 'Menu2-3',\n            value: 'Menu2-3'\n          }, {\n            title: 'Menu2-4',\n            value: 'Menu2-4'\n          }]\n        }, {\n          title: '체크메뉴3',\n          list: [{\n            title: 'Menu3-1',\n            value: 'Menu3-1'\n          }, {\n            title: 'Menu3-2',\n            value: 'Menu3-2'\n          }]\n        }];\n        const menus2 = [{\n          title: 'Deafult Menu1',\n          list: [{\n            title: 'sameValue',\n            value: 'sameValue'\n          }, {\n            title: 'diffVal1',\n            value: 'diffVal1'\n          }]\n        }, {\n          title: 'Deafult Menu2',\n          list: [{\n            title: 'sameValue',\n            value: 'sameValue'\n          }, {\n            title: 'diffVal2',\n            value: 'diffVal2'\n          }]\n        }];\n        const menus3 = [{\n          title: '즐겨찾기1',\n          list: [{\n            title: '커리어웹 가기',\n            value: 'https://career.rememberapp.co.kr/',\n            onClick: value => {\n              window.open(value);\n            }\n          }, {\n            title: '리멤버웹 가기',\n            value: 'https://rememberapp.co.kr/',\n            onClick: value => {\n              window.open(value);\n            }\n          }]\n        }, {\n          title: '즐겨찾기2',\n          list: [{\n            title: '프로필웹 가기',\n            value: 'http://profile.rememberapp.co.kr/',\n            onClick: value => {\n              window.open(value);\n            }\n          }, {\n            title: '커뮤니티웹 가기',\n            value: 'https://community.rememberapp.co.kr/',\n            onClick: value => {\n              window.open(value);\n            }\n          }]\n        }];\n        const [checkedList, setCheckedList] = React.useState([]);\n\n        const isCheckedItem = (_title, _value) => {\n          return checkedList.some(({\n            title,\n            value\n          }) => title === _title && value === _value);\n        };\n\n        const onCheckItem = (title, value) => {\n          const checkedIndex = checkedList.findIndex(el => el.title === title && el.value === value);\n\n          if (checkedIndex < 0) {\n            setCheckedList([...checkedList, {\n              title,\n              value\n            }]);\n          } else {\n            checkedList.splice(checkedIndex, 1);\n            setCheckedList([...checkedList]);\n          }\n        };\n\n        return <>\n        <DoczContainer direction=\"column\" mdxType=\"DoczContainer\">\n          <h3>체크박스 있는 경우</h3>\n          <Accordian menus={menus} onCheckItem={onCheckItem} isCheckedItem={isCheckedItem} hasCheckBox={true} mdxType=\"Accordian\" />\n          <>{checkedList.map(el => ` (${el.title}/${el.value}) `)}</>\n        </DoczContainer>\n        <DoczContainer direction=\"column\" mdxType=\"DoczContainer\">\n           <h3>각 menu 클릭할 경우 공통 로직 적용 되는 예제 / 현재는 console.log</h3>\n           <Accordian menus={menus2} onClickItem={value => console.log(value)} mdxType=\"Accordian\" />\n        </DoczContainer>\n        <DoczContainer direction=\"column\" mdxType=\"DoczContainer\">\n           <h3>각 menu 클릭할 경우 각각의 event handling 할 경우</h3>\n           <Accordian menus={menus3} mdxType=\"Accordian\" />\n        </DoczContainer>\n      </>;\n      }}\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}